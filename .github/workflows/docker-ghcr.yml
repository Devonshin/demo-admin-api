name: Build and Push to GHCR (Production)

on:
  push:
    branches: [ "production" ]
  pull_request:
    branches: [ "production" ]
    
env:
  REGISTRY: ghcr.io
  BUILD_ARG_PROFILE: "production"  # build-arg 값 정의

jobs:
  build-and-push:
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && github.base_ref == 'refs/heads/production')
    runs-on: ubuntu-latest
    environment: prod_env
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 이미지 이름을 소문자로 변환하여 환경 변수에 설정
      - name: Set lowercase image name
        run: |
          echo "IMAGE_NAME=$(echo "${{ github.repository_owner }}/${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 2. 환경 변수 출력 (디버깅용)
      - name: Print environment variables
        run: |
          echo "REGISTRY: ${{ env.REGISTRY }}"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "BUILD_ARG_PROFILE: ${{ env.BUILD_ARG_PROFILE }}"
          echo "GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN != '' }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "TARGET_INSTANCE_ID: ${{ vars.TARGET_INSTANCE_ID }}"
          echo "SSH_USER: ${{ vars.SSH_USER }}"
          echo "GHCR_RECEIPT_TOKEN: ${{ secrets.GHCR_RECEIPT_TOKEN }}"

      # 3. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 4. Java 환경 설정 (Gradle 빌드용)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 5. Gradle 빌드 (실행권한)
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 6. Gradle 빌드 (테스트 제외)
      - name: Build with Gradle (skip tests)
        run: ./gradlew build -x test

      # 7. GitHub container registry (ghcr.io) 로그인
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub 이 자동으로 생성하는 인증 토큰

      # 8. Docker 이미지 메타데이터 추출 - latest 및 git commit SHA 기반 생성
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      # 9. 이미지 빌드 및 GitHub Container Registry 에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: | # Docker 빌드 시 전달할 인수들
            PROFILE=${{ env.BUILD_ARG_PROFILE }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_PROD_AWS_ACCESS_KEY_ID }}
            AWS_SECRET_KEY=${{ secrets.AWS_PROD_AWS_SECRET_KEY }}

      # 10. AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_MOGGY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MOGGY_SECRET_ACCESS_KEY }}

      # 11. AWS Systems Manager(SSM)을 통해 원격 인스턴스에서 스크립트 실행
      - name: Execute Script via SSM
        run: |
          aws ssm send-command \
            --targets "Key=tag:${{ vars.INST_TAG_KEY }},Values=${{ vars.INST_TAG_VAL }}" \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":["cd /home/ec2-user && ./pull_and_run.sh"]}'
